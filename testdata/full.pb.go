// Code generated by protoc-gen-go. DO NOT EDIT.
// source: full.proto

package full

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ComplexMessage_SimpleEnum int32

const (
	ComplexMessage_UNSPECIFIED ComplexMessage_SimpleEnum = 0
	ComplexMessage_VALUE_A     ComplexMessage_SimpleEnum = 1
	ComplexMessage_VALUE_B     ComplexMessage_SimpleEnum = 2
	ComplexMessage_VALUE_B1    ComplexMessage_SimpleEnum = 3
	ComplexMessage_VALUE_B2    ComplexMessage_SimpleEnum = 4
	ComplexMessage_VALUE_B3    ComplexMessage_SimpleEnum = 5
	ComplexMessage_VALUE_B4    ComplexMessage_SimpleEnum = 6
	ComplexMessage_VALUE_B5    ComplexMessage_SimpleEnum = 7
	ComplexMessage_VALUE_B6    ComplexMessage_SimpleEnum = 8
	ComplexMessage_VALUE_B7    ComplexMessage_SimpleEnum = 9
	ComplexMessage_VALUE_B8    ComplexMessage_SimpleEnum = 1000
)

var ComplexMessage_SimpleEnum_name = map[int32]string{
	0:    "UNSPECIFIED",
	1:    "VALUE_A",
	2:    "VALUE_B",
	3:    "VALUE_B1",
	4:    "VALUE_B2",
	5:    "VALUE_B3",
	6:    "VALUE_B4",
	7:    "VALUE_B5",
	8:    "VALUE_B6",
	9:    "VALUE_B7",
	1000: "VALUE_B8",
}
var ComplexMessage_SimpleEnum_value = map[string]int32{
	"UNSPECIFIED": 0,
	"VALUE_A":     1,
	"VALUE_B":     2,
	"VALUE_B1":    3,
	"VALUE_B2":    4,
	"VALUE_B3":    5,
	"VALUE_B4":    6,
	"VALUE_B5":    7,
	"VALUE_B6":    8,
	"VALUE_B7":    9,
	"VALUE_B8":    1000,
}

func (x ComplexMessage_SimpleEnum) String() string {
	return proto.EnumName(ComplexMessage_SimpleEnum_name, int32(x))
}
func (ComplexMessage_SimpleEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_full_ae8045dffac0c655, []int{0, 0}
}

type ComplexMessage struct {
	Enum           ComplexMessage_SimpleEnum     `protobuf:"varint,1,opt,name=enum,proto3,enum=ComplexMessage_SimpleEnum" json:"enum,omitempty"`
	ScalarInt32    int32                         `protobuf:"varint,2,opt,name=scalar_int32,json=scalarInt32,proto3" json:"scalar_int32,omitempty"`
	ScalarInt64    int64                         `protobuf:"varint,3,opt,name=scalar_int64,json=scalarInt64,proto3" json:"scalar_int64,omitempty"`
	ScalarUint32   uint32                        `protobuf:"varint,4,opt,name=scalar_uint32,json=scalarUint32,proto3" json:"scalar_uint32,omitempty"`
	ScalarUint64   uint64                        `protobuf:"varint,5,opt,name=scalar_uint64,json=scalarUint64,proto3" json:"scalar_uint64,omitempty"`
	ScalarSint32   int32                         `protobuf:"zigzag32,6,opt,name=scalar_sint32,json=scalarSint32,proto3" json:"scalar_sint32,omitempty"`
	ScalarSint64   int64                         `protobuf:"zigzag64,7,opt,name=scalar_sint64,json=scalarSint64,proto3" json:"scalar_sint64,omitempty"`
	ScalarFixed32  uint32                        `protobuf:"fixed32,8,opt,name=scalar_fixed32,json=scalarFixed32,proto3" json:"scalar_fixed32,omitempty"`
	ScalarFixed64  uint64                        `protobuf:"fixed64,9,opt,name=scalar_fixed64,json=scalarFixed64,proto3" json:"scalar_fixed64,omitempty"`
	ScalarSfixed32 int32                         `protobuf:"fixed32,10,opt,name=scalar_sfixed32,json=scalarSfixed32,proto3" json:"scalar_sfixed32,omitempty"`
	ScalarSfixed64 int64                         `protobuf:"fixed64,11,opt,name=scalar_sfixed64,json=scalarSfixed64,proto3" json:"scalar_sfixed64,omitempty"`
	ScalarDouble   float64                       `protobuf:"fixed64,12,opt,name=scalar_double,json=scalarDouble,proto3" json:"scalar_double,omitempty"`
	ScalarFloat    float32                       `protobuf:"fixed32,13,opt,name=scalar_float,json=scalarFloat,proto3" json:"scalar_float,omitempty"`
	ScalarBool     bool                          `protobuf:"varint,14,opt,name=scalar_bool,json=scalarBool,proto3" json:"scalar_bool,omitempty"`
	ScalarString   string                        `protobuf:"bytes,15,opt,name=scalar_string,json=scalarString,proto3" json:"scalar_string,omitempty"`
	Message        *ComplexMessage_SimpleMessage `protobuf:"bytes,16,opt,name=message,proto3" json:"message,omitempty"`
	Bytes          []byte                        `protobuf:"bytes,17,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// Maps
	MapEnum   map[int32]ComplexMessage_SimpleEnum      `protobuf:"bytes,18,rep,name=map_enum,json=mapEnum,proto3" json:"map_enum,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=ComplexMessage_SimpleEnum"`
	MapScalar map[int32]int32                          `protobuf:"bytes,19,rep,name=map_scalar,json=mapScalar,proto3" json:"map_scalar,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapMsg    map[string]*ComplexMessage_SimpleMessage `protobuf:"bytes,20,rep,name=map_msg,json=mapMsg,proto3" json:"map_msg,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBytes  map[string][]byte                        `protobuf:"bytes,21,rep,name=map_bytes,json=mapBytes,proto3" json:"map_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapString map[string]string                        `protobuf:"bytes,22,rep,name=map_string,json=mapString,proto3" json:"map_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Repeated
	REnum                []ComplexMessage_SimpleEnum     `protobuf:"varint,23,rep,packed,name=r_enum,json=rEnum,proto3,enum=ComplexMessage_SimpleEnum" json:"r_enum,omitempty"`
	RScalar              []int32                         `protobuf:"varint,24,rep,packed,name=r_scalar,json=rScalar,proto3" json:"r_scalar,omitempty"`
	RMsg                 []*ComplexMessage_SimpleMessage `protobuf:"bytes,25,rep,name=r_msg,json=rMsg,proto3" json:"r_msg,omitempty"`
	RBytes               [][]byte                        `protobuf:"bytes,26,rep,name=r_bytes,json=rBytes,proto3" json:"r_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ComplexMessage) Reset()         { *m = ComplexMessage{} }
func (m *ComplexMessage) String() string { return proto.CompactTextString(m) }
func (*ComplexMessage) ProtoMessage()    {}
func (*ComplexMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_full_ae8045dffac0c655, []int{0}
}
func (m *ComplexMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComplexMessage.Unmarshal(m, b)
}
func (m *ComplexMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComplexMessage.Marshal(b, m, deterministic)
}
func (dst *ComplexMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplexMessage.Merge(dst, src)
}
func (m *ComplexMessage) XXX_Size() int {
	return xxx_messageInfo_ComplexMessage.Size(m)
}
func (m *ComplexMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplexMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ComplexMessage proto.InternalMessageInfo

func (m *ComplexMessage) GetEnum() ComplexMessage_SimpleEnum {
	if m != nil {
		return m.Enum
	}
	return ComplexMessage_UNSPECIFIED
}

func (m *ComplexMessage) GetScalarInt32() int32 {
	if m != nil {
		return m.ScalarInt32
	}
	return 0
}

func (m *ComplexMessage) GetScalarInt64() int64 {
	if m != nil {
		return m.ScalarInt64
	}
	return 0
}

func (m *ComplexMessage) GetScalarUint32() uint32 {
	if m != nil {
		return m.ScalarUint32
	}
	return 0
}

func (m *ComplexMessage) GetScalarUint64() uint64 {
	if m != nil {
		return m.ScalarUint64
	}
	return 0
}

func (m *ComplexMessage) GetScalarSint32() int32 {
	if m != nil {
		return m.ScalarSint32
	}
	return 0
}

func (m *ComplexMessage) GetScalarSint64() int64 {
	if m != nil {
		return m.ScalarSint64
	}
	return 0
}

func (m *ComplexMessage) GetScalarFixed32() uint32 {
	if m != nil {
		return m.ScalarFixed32
	}
	return 0
}

func (m *ComplexMessage) GetScalarFixed64() uint64 {
	if m != nil {
		return m.ScalarFixed64
	}
	return 0
}

func (m *ComplexMessage) GetScalarSfixed32() int32 {
	if m != nil {
		return m.ScalarSfixed32
	}
	return 0
}

func (m *ComplexMessage) GetScalarSfixed64() int64 {
	if m != nil {
		return m.ScalarSfixed64
	}
	return 0
}

func (m *ComplexMessage) GetScalarDouble() float64 {
	if m != nil {
		return m.ScalarDouble
	}
	return 0
}

func (m *ComplexMessage) GetScalarFloat() float32 {
	if m != nil {
		return m.ScalarFloat
	}
	return 0
}

func (m *ComplexMessage) GetScalarBool() bool {
	if m != nil {
		return m.ScalarBool
	}
	return false
}

func (m *ComplexMessage) GetScalarString() string {
	if m != nil {
		return m.ScalarString
	}
	return ""
}

func (m *ComplexMessage) GetMessage() *ComplexMessage_SimpleMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ComplexMessage) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *ComplexMessage) GetMapEnum() map[int32]ComplexMessage_SimpleEnum {
	if m != nil {
		return m.MapEnum
	}
	return nil
}

func (m *ComplexMessage) GetMapScalar() map[int32]int32 {
	if m != nil {
		return m.MapScalar
	}
	return nil
}

func (m *ComplexMessage) GetMapMsg() map[string]*ComplexMessage_SimpleMessage {
	if m != nil {
		return m.MapMsg
	}
	return nil
}

func (m *ComplexMessage) GetMapBytes() map[string][]byte {
	if m != nil {
		return m.MapBytes
	}
	return nil
}

func (m *ComplexMessage) GetMapString() map[string]string {
	if m != nil {
		return m.MapString
	}
	return nil
}

func (m *ComplexMessage) GetREnum() []ComplexMessage_SimpleEnum {
	if m != nil {
		return m.REnum
	}
	return nil
}

func (m *ComplexMessage) GetRScalar() []int32 {
	if m != nil {
		return m.RScalar
	}
	return nil
}

func (m *ComplexMessage) GetRMsg() []*ComplexMessage_SimpleMessage {
	if m != nil {
		return m.RMsg
	}
	return nil
}

func (m *ComplexMessage) GetRBytes() [][]byte {
	if m != nil {
		return m.RBytes
	}
	return nil
}

type ComplexMessage_SimpleMessage struct {
	SomeField            int32    `protobuf:"varint,1,opt,name=some_field,json=someField,proto3" json:"some_field,omitempty"`
	SomeField2           string   `protobuf:"bytes,2,opt,name=some_field2,json=someField2,proto3" json:"some_field2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComplexMessage_SimpleMessage) Reset()         { *m = ComplexMessage_SimpleMessage{} }
func (m *ComplexMessage_SimpleMessage) String() string { return proto.CompactTextString(m) }
func (*ComplexMessage_SimpleMessage) ProtoMessage()    {}
func (*ComplexMessage_SimpleMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_full_ae8045dffac0c655, []int{0, 0}
}
func (m *ComplexMessage_SimpleMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComplexMessage_SimpleMessage.Unmarshal(m, b)
}
func (m *ComplexMessage_SimpleMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComplexMessage_SimpleMessage.Marshal(b, m, deterministic)
}
func (dst *ComplexMessage_SimpleMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplexMessage_SimpleMessage.Merge(dst, src)
}
func (m *ComplexMessage_SimpleMessage) XXX_Size() int {
	return xxx_messageInfo_ComplexMessage_SimpleMessage.Size(m)
}
func (m *ComplexMessage_SimpleMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplexMessage_SimpleMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ComplexMessage_SimpleMessage proto.InternalMessageInfo

func (m *ComplexMessage_SimpleMessage) GetSomeField() int32 {
	if m != nil {
		return m.SomeField
	}
	return 0
}

func (m *ComplexMessage_SimpleMessage) GetSomeField2() string {
	if m != nil {
		return m.SomeField2
	}
	return ""
}

func init() {
	proto.RegisterType((*ComplexMessage)(nil), "ComplexMessage")
	proto.RegisterMapType((map[string][]byte)(nil), "ComplexMessage.MapBytesEntry")
	proto.RegisterMapType((map[int32]ComplexMessage_SimpleEnum)(nil), "ComplexMessage.MapEnumEntry")
	proto.RegisterMapType((map[string]*ComplexMessage_SimpleMessage)(nil), "ComplexMessage.MapMsgEntry")
	proto.RegisterMapType((map[int32]int32)(nil), "ComplexMessage.MapScalarEntry")
	proto.RegisterMapType((map[string]string)(nil), "ComplexMessage.MapStringEntry")
	proto.RegisterType((*ComplexMessage_SimpleMessage)(nil), "ComplexMessage.SimpleMessage")
	proto.RegisterEnum("ComplexMessage_SimpleEnum", ComplexMessage_SimpleEnum_name, ComplexMessage_SimpleEnum_value)
}

func init() { proto.RegisterFile("full.proto", fileDescriptor_full_ae8045dffac0c655) }

var fileDescriptor_full_ae8045dffac0c655 = []byte{
	// 719 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xdd, 0x6e, 0xda, 0x48,
	0x18, 0xdd, 0xc1, 0x18, 0xe3, 0x8f, 0xbf, 0xc9, 0x6c, 0x76, 0x33, 0x61, 0x37, 0xed, 0x34, 0x55,
	0xd5, 0xb9, 0x42, 0x8d, 0x71, 0x9d, 0x28, 0x6d, 0x2f, 0xf2, 0x03, 0x52, 0xa4, 0xa6, 0xad, 0x8c,
	0x12, 0xf5, 0x0e, 0x41, 0x63, 0x10, 0xaa, 0x8d, 0x91, 0x0d, 0x55, 0xf2, 0x46, 0x7d, 0x8e, 0x3e,
	0x4d, 0x1f, 0xa3, 0xf2, 0x8c, 0x4d, 0xc6, 0xd4, 0x15, 0x77, 0x9c, 0x6f, 0xce, 0x39, 0xcc, 0x39,
	0xfe, 0x30, 0x00, 0x93, 0x95, 0xef, 0x77, 0x16, 0x51, 0xb8, 0x0c, 0x0f, 0x7f, 0x34, 0xa0, 0x79,
	0x11, 0x06, 0x0b, 0xdf, 0xbb, 0xbf, 0xf6, 0xe2, 0x78, 0x34, 0xf5, 0x48, 0x07, 0xca, 0xde, 0x7c,
	0x15, 0x50, 0xc4, 0x10, 0x6f, 0x5a, 0xed, 0x4e, 0xfe, 0xb8, 0x33, 0x98, 0x25, 0xb0, 0x37, 0x5f,
	0x05, 0xae, 0xe0, 0x91, 0x67, 0x50, 0x8f, 0xbf, 0x8c, 0xfc, 0x51, 0x34, 0x9c, 0xcd, 0x97, 0x5d,
	0x8b, 0x96, 0x18, 0xe2, 0xba, 0x5b, 0x93, 0xb3, 0xab, 0x64, 0x94, 0xa7, 0x38, 0x36, 0xd5, 0x18,
	0xe2, 0x9a, 0x42, 0x71, 0x6c, 0xf2, 0x1c, 0x1a, 0x29, 0x65, 0x25, 0x6d, 0xca, 0x0c, 0xf1, 0x86,
	0x9b, 0xea, 0x6e, 0xc4, 0x6c, 0x83, 0xe4, 0xd8, 0x54, 0x67, 0x88, 0x97, 0x55, 0x52, 0xce, 0x29,
	0x96, 0x4e, 0x15, 0x86, 0xf8, 0x4e, 0x46, 0x1a, 0x6c, 0x3a, 0xc5, 0xd2, 0xc9, 0x60, 0x88, 0x13,
	0x95, 0xe4, 0xd8, 0xe4, 0x05, 0x34, 0x53, 0xd2, 0x64, 0x76, 0xef, 0xdd, 0x75, 0x2d, 0x5a, 0x65,
	0x88, 0x1b, 0x6e, 0x2a, 0xed, 0xcb, 0xe1, 0x26, 0xcd, 0xb1, 0xa9, 0xc9, 0x10, 0xaf, 0xe4, 0x68,
	0x8e, 0x4d, 0x5e, 0x42, 0x2b, 0xfb, 0xca, 0xcc, 0x0e, 0x18, 0xe2, 0x2d, 0x37, 0x55, 0x0f, 0xd2,
	0xe9, 0x6f, 0x44, 0xc7, 0xa6, 0x35, 0x86, 0x38, 0xce, 0x13, 0x73, 0x49, 0xef, 0xc2, 0xd5, 0xd8,
	0xf7, 0x68, 0x9d, 0x21, 0x8e, 0xb2, 0x10, 0x97, 0x62, 0xa6, 0x74, 0x3f, 0xf1, 0xc3, 0xd1, 0x92,
	0x36, 0x18, 0xe2, 0xa5, 0xac, 0xfb, 0x7e, 0x32, 0x22, 0x4f, 0x21, 0x85, 0xc3, 0x71, 0x18, 0xfa,
	0xb4, 0xc9, 0x10, 0xaf, 0xba, 0x20, 0x47, 0xe7, 0x61, 0xe8, 0xab, 0x6d, 0x2d, 0xa3, 0xd9, 0x7c,
	0x4a, 0x5b, 0x0c, 0x71, 0x73, 0xdd, 0x96, 0x98, 0x91, 0x63, 0x30, 0x02, 0xb9, 0x23, 0x14, 0x33,
	0xc4, 0x6b, 0xd6, 0x41, 0xf1, 0xea, 0xa4, 0xc8, 0xcd, 0xd8, 0x64, 0x17, 0xf4, 0xf1, 0xc3, 0xd2,
	0x8b, 0xe9, 0x0e, 0x43, 0xbc, 0xee, 0x4a, 0x40, 0x8e, 0xa1, 0x1a, 0x8c, 0x16, 0x43, 0xb1, 0x8a,
	0x84, 0x69, 0xbc, 0x66, 0xfd, 0xbf, 0xe9, 0x77, 0x3d, 0x5a, 0x24, 0x7b, 0xd8, 0x9b, 0x2f, 0xa3,
	0x07, 0xd7, 0x08, 0x24, 0x22, 0xef, 0x00, 0x12, 0xa1, 0xbc, 0x1b, 0xfd, 0x5b, 0x48, 0x9f, 0x14,
	0x48, 0x07, 0x82, 0x20, 0xc5, 0x66, 0x90, 0x61, 0x62, 0x43, 0xe2, 0x34, 0x0c, 0xe2, 0x29, 0xdd,
	0x15, 0xda, 0xff, 0x0a, 0xb4, 0xd7, 0xf1, 0x54, 0x0a, 0x2b, 0x81, 0x00, 0xe4, 0x14, 0x12, 0x8b,
	0xa1, 0xcc, 0xf1, 0x8f, 0xd0, 0x1d, 0x14, 0xe8, 0xce, 0x93, 0x73, 0xa9, 0x4c, 0xd2, 0x09, 0xb8,
	0xbe, 0xb0, 0xac, 0xf6, 0xdf, 0x3f, 0x5f, 0x58, 0x10, 0x94, 0x0b, 0xcb, 0xde, 0x8f, 0xa0, 0x12,
	0xc9, 0x9a, 0xf6, 0x98, 0xb6, 0xe5, 0x17, 0xab, 0x47, 0xa2, 0xa2, 0x7d, 0xa8, 0x46, 0x59, 0x41,
	0x94, 0x69, 0x5c, 0x77, 0x8d, 0x28, 0x8d, 0x6f, 0x81, 0x1e, 0x89, 0xf0, 0xfb, 0xc5, 0x21, 0xf2,
	0xcf, 0xb0, 0x1c, 0x25, 0xe1, 0xf7, 0xc0, 0x88, 0xd2, 0xe8, 0x6d, 0xa6, 0xf1, 0xba, 0x5b, 0x89,
	0x44, 0xb2, 0xf6, 0x47, 0x68, 0xe4, 0xf8, 0xe4, 0x00, 0x20, 0x0e, 0x03, 0x6f, 0x38, 0x99, 0x79,
	0xfe, 0x9d, 0x78, 0xc3, 0xe8, 0xae, 0x99, 0x4c, 0xfa, 0xc9, 0x40, 0x2c, 0xe2, 0xfa, 0x58, 0xbe,
	0x49, 0x4c, 0x17, 0xd6, 0xe7, 0x56, 0xfb, 0x16, 0xea, 0xea, 0x43, 0x27, 0x18, 0xb4, 0xaf, 0xde,
	0x43, 0x6a, 0x94, 0x7c, 0x24, 0xaf, 0x40, 0xff, 0x36, 0xf2, 0x57, 0x9e, 0x10, 0x6f, 0x29, 0x43,
	0x10, 0x4f, 0x4b, 0x27, 0xa8, 0xfd, 0x16, 0x9a, 0xf9, 0x8d, 0x28, 0x70, 0xde, 0x55, 0x9d, 0x75,
	0x55, 0xfd, 0x19, 0x6a, 0xca, 0x4e, 0xa8, 0x52, 0x53, 0x4a, 0xbb, 0xaa, 0x74, 0x6b, 0xa9, 0x8a,
	0xf3, 0x1b, 0x68, 0xe4, 0xb6, 0xa6, 0xc0, 0x3b, 0x77, 0xad, 0x7a, 0x41, 0xa8, 0xc7, 0xad, 0xd9,
	0xa6, 0x36, 0x15, 0xf5, 0xe1, 0x77, 0x04, 0xf0, 0x58, 0x16, 0x69, 0x41, 0xed, 0xe6, 0xc3, 0xe0,
	0x53, 0xef, 0xe2, 0xaa, 0x7f, 0xd5, 0xbb, 0xc4, 0x7f, 0x91, 0x1a, 0x18, 0xb7, 0x67, 0xef, 0x6f,
	0x7a, 0xc3, 0x33, 0x8c, 0x1e, 0xc1, 0x39, 0x2e, 0x91, 0x3a, 0x54, 0x53, 0x70, 0x84, 0x35, 0x05,
	0x59, 0xb8, 0xac, 0xa0, 0x2e, 0xd6, 0x15, 0x64, 0xe3, 0x8a, 0x82, 0x5e, 0x63, 0x43, 0x41, 0x0e,
	0xae, 0x2a, 0xe8, 0x18, 0x9b, 0xa4, 0xb1, 0x46, 0x27, 0xf8, 0xa7, 0x31, 0xae, 0x88, 0xff, 0xb2,
	0xee, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x26, 0x4b, 0x15, 0xd9, 0x06, 0x00, 0x00,
}
